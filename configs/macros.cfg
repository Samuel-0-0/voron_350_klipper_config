###############################
######    自定义宏脚本    ######
###############################

## 根据XYZ轴的情况判断是否需要进行G28归零
[gcode_macro CG28]
gcode:
  {% if printer.toolhead.homed_axes != "xyz" %}   # 判断已经归零的轴是否是XYZ
    STATUS_HOMING                                 # 设置logo灯颜色
    G28                                           # 执行归零
    STATUS_READY                                  # 设置logo灯颜色
  {% endif %}

## 四轴调平
[gcode_macro G32]
gcode:
    BED_MESH_CLEAR                # 清除网床
    CG28                          # 归零
    STATUS_LEVELING               # 设置logo灯颜色
    QUAD_GANTRY_LEVEL             # 四轴调平
    STATUS_HOMING                 # 设置logo灯颜色
    G28                           # 重新进行归零，修复QGL造成的误差
    STATUS_READY                  # 设置logo灯颜色

## 自定义加速度
[gcode_macro M204]
description: Override the Marlin styled M204 command to set both acceleration and deceleration at the same time. 
rename_existing: M204.1
gcode:
    {% set s = params.S|float %}
    SET_VELOCITY_LIMIT ACCEL={s} ACCEL_TO_DECEL={s / 2.0}

## 重置挤出机
[gcode_macro RESET_EXTRUDER]
gcode:
    G92 E0

## 根据仓温调整电机电流，未完全调试好
[gcode_macro _CHAMBER_CURRENT]
gcode:
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc5160 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc5160 stepper_y'].run_current|float %}
    {% set HOME_CURRENT = 0.7 %}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}

## 打印开始前执行的宏
[gcode_macro PRINT_START]
# 在切片软件的开始G-CODE填入
# CURA 5.0：
# PRINT_START EXTRUDER={material_print_temperature_layer_0} BED={material_bed_temperature_layer_0} CHAMBER={build_volume_temperature} NOZZLE={machine_nozzle_size} FILAMENT={material_type} SIZE=%MINX%_%MINY%_%MAXX%_%MAXY%

# SuperSlicer：
# M190 S0
# M109 S0 ; uncomment to remove set&wait temp gcode added automatically after this start gcode
# PRINT_START EXTRUDER={first_layer_temperature[initial_extruder] + extruder_temperature_offset[initial_extruder]} BED=[first_layer_bed_temperature] CHAMBER=[chamber_temperature] NOZZLE=[nozzle_diameter] FILAMENT=[filament_type] SIZE={first_layer_print_min[0]}_{first_layer_print_min[1]}_{first_layer_print_max[0]}_{first_layer_print_max[1]}

# PrusaSlicer：
# M140 S0
# M104 S0 ; uncomment to remove set&wait temp gcode added automatically after this start gcode
# PRINT_START EXTRUDER=[first_layer_temperature] BED=[first_layer_bed_temperature] CHAMBER=[chamber_temperature] NOZZLE=[nozzle_diameter] FILAMENT=[filament_type] SIZE={first_layer_print_min[0]}_{first_layer_print_min[1]}_{first_layer_print_max[0]}_{first_layer_print_max[1]}

gcode:
    CLEAR_PAUSE                                                                        # 清空暂停缓存
    LIGHT_ON                                                                           # 打开顶部照明灯
    SET_FAN_SPEED FAN=controller_fan SPEED=0.6                                         # 开启驱动冷却风扇
    {% set BED_TEMP = params.BED|default(60)|int %}                                    # 从切片中获取热床温度
    {% set EXTRUDER_TEMP = params.EXTRUDER|default(200)|int %}                         # 从切片中获取打印头温度
    {% set CHAMBERD_TEMP = params.CHAMBER|default(0)|int %}                            # 从切片中获取仓温温度
    {% set FILAMENT_TYPE = params.FILAMENT|default("PLA")|string %}                    # 从切片中获取耗材类型
    {% set NOZZLE_SIZE = params.NOZZLE|default(0.4)|int %}                             # 从切片中获取喷嘴大小
    {% set FL_SIZE = params.SIZE|default("0_0_0_0")|string %}                          # 从切片中获取区域床网范围
    COMPUTE_MESH_PARAMETERS SIZE={FL_SIZE}                                             # 设置区域床网范围
    STATUS_HEATING                                                                     # 设置logo灯颜色
    LIGHT_RED                                                                          # 设置顶部灯光颜色
    M140 S{BED_TEMP}                                                                   # 设置热床目标温度
    #M104 S{EXTRUDER_TEMP}                                                             # 设置打印头目标温度
    CG28                                                                               # 如果没有归零则执行归零
    M190 S{BED_TEMP}                                                                   # 等待热床到达指定温度
    {% if CHAMBERD_TEMP > 0 %}                                                         # 如果需要仓温则进行指定操作
      M117 Heatsoaking...
      M106 S255                                                                        # 模型散热风扇开到最大，辅助空气循环
      #Nevermore_on                                                                    # 开启内循环
      TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={CHAMBERD_TEMP}     # 等待仓温到达指定温度
      M107                                                                             # 关闭模型散热风扇
    {% endif %}
    LIGHT_WHITE                                                                        # 设置顶部灯光颜色
    #{% if not printer.quad_gantry_level.applied %}                                    # 如果没有做4Z调平执行指定操作
    STATUS_LEVELING                                                                    # 设置logo灯颜色
    M117 Quad Gantry Leveling...
    G32                                                                                # 4轴调平
    #{% endif %}
    #STATUS_CLEANING                                                                   # 设置logo灯颜色
    #CLEAN_NOZZLE                                                                      # 清理喷嘴
    #STATUS_CALIBRATING_Z                                                              # 自动Z偏移
    #M117 Calibrating Z Offset...
    #CALIBRATE_Z                                                                       # --- 普通自动Z偏移 ---
    #{% set mesh_center = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].mesh_center %}
    #CALIBRATE_Z BED_POSITION={mesh_center}                                            # --- 区域床网自动Z偏移 ---
    SET_GCODE_OFFSET Z=2.3                                                             # 手动指定Z偏移，值越小越靠近床 #PEI钢板
    #SET_GCODE_OFFSET Z_ADJUST={params.Z_ADJUST|default(0.0)|float} MOVE=1             # 根据耗材设置微调Z偏移
    #MATERIAL_PA MATERIAL={FILAMENT_TYPE}                                              # 根据耗材调整PA值
    #STATUS_MESHING
    #M117 Calibrating Bed Mesh...
    #BED_MESH_CALIBRATE                                                                # --- Klicky探测床网 ---
    #ADAPTIVE_BED_MESH                                                                 # --- 区域床网探测 ---
    BED_MESH_PROFILE LOAD={BED_TEMP}                                                   # 加载网床
    STATUS_HEATING                                                                     # 设置logo灯颜色
    M109 S{EXTRUDER_TEMP}                                                              # 等待热端到达指定温度
    PURGE_LINE                                                                         # 打印测试线
    RESET_EXTRUDER                                                                     # 重置挤出机
    STATUS_PRINTING                                                                    # 设置logo灯颜色
    M117 Printing...

## 打印结束后执行的宏
[gcode_macro PRINT_END]
gcode:
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    M400                                                        # 等待缓存清空
    RESET_EXTRUDER                                              # 重置挤出机
    G1 E-5.0 F1800                                              # 回抽5mm
    TURN_OFF_HEATERS                                            # 关闭喷头加热
    G90                                                         # 切换到相对于原点的坐标系
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000                     # 抬高喷嘴避免烫坏打印件
    G0 X{th.axis_maximum.x - 2} Y{th.axis_maximum.y - 2} Z{th.position.z + 50 if th.position.z < 100 else z_safe} F3600        # 停到指定位置
    BED_MESH_CLEAR                                              # 清除床网
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END
    M84                                                         # 关闭步进电机
    M107                                                        # 关闭风扇
    #Nevermore_off                                              # 关闭内循环
    M117

## 画线
[gcode_macro PURGE_LINE]
# 在热床左边打印一条线，让挤出机做好准备
gcode:
    G1 X3 Y20 Z0.5 F6000                     # 移动到开始位置
    RESET_EXTRUDER                           # 重置挤出机
    G1 E20 F150                              # 在原地挤出20mm耗材排空气
    RESET_EXTRUDER                           # 重置挤出机
    G1 X3 Y200 Z0.25 F1500 E10               # 画线
    G1 Z2.0 F3000                            # 抬高喷嘴

## 打印头停到前面
[gcode_macro PARKFRONT]
gcode:
    #{% if printer.idle_timeout.state != "Printing" %}
        CG28
        SAVE_GCODE_STATE NAME=PARKFRONT
        G90
        G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+10} F30000
        RESTORE_GCODE_STATE NAME=PARKFRONT
    #{% else %}
    #    { action_respond_info("PARKFRONT disabled while printing!") }
    #{% endif %}

## 打印头移动到中间
[gcode_macro MOVE_TO_CENTER]
gcode:
    CG28
    SAVE_GCODE_STATE NAME=move_to_center
    G90
    G0 X{printer.toolhead.axis_maximum.x / 2} Y{printer.toolhead.axis_maximum.y / 2} Z50 F10000
    RESTORE_GCODE_STATE NAME=move_to_center

## 打印头停靠到中间
[gcode_macro PARKCENTER]
gcode:
    CG28
    SAVE_GCODE_STATE NAME=part_center
    G90
    G0 X{printer.toolhead.axis_maximum.x / 2} Y{printer.toolhead.axis_maximum.y / 2} F30000
    RESTORE_GCODE_STATE NAME=part_center

## 打印头停靠到右后侧
[gcode_macro PARKREARRIGHT]
gcode:
    CG28
    SAVE_GCODE_STATE NAME=PARKREAR
    G90
    G0 X{printer.toolhead.axis_maximum.x-10} Y{printer.toolhead.axis_maximum.y-10} F30000     
    RESTORE_GCODE_STATE NAME=PARKREAR

# 打印对象排除 (aka Marlin/RRF M486 commands)
# 对象预处理下载 https://github.com/kageurufu/cancelobject-preprocessor/releases
[exclude_object]

## 排除打印对象
[gcode_macro M486]
gcode:
  # Parameters known to M486 are as follows:
  #   [C<flag>] Cancel the current object
  #   [P<index>] Cancel the object with the given index
  #   [S<index>] Set the index of the current object.
  #       If the object with the given index has been canceled, this will cause
  #       the firmware to skip to the next object. The value -1 is used to
  #       indicate something that isn’t an object and shouldn’t be skipped.
  #   [T<count>] Reset the state and set the number of objects
  #   [U<index>] Un-cancel the object with the given index. This command will be
  #       ignored if the object has already been skipped

  {% if 'exclude_object' not in printer %}
    {action_raise_error("[exclude_object] is not enabled")}
  {% endif %}

  {% if 'T' in params %}
    EXCLUDE_OBJECT RESET=1

    {% for i in range(params.T | int) %}
      EXCLUDE_OBJECT_DEFINE NAME={i}
    {% endfor %}
  {% endif %}

  {% if 'C' in params %}
    EXCLUDE_OBJECT CURRENT=1
  {% endif %}

  {% if 'P' in params %}
    EXCLUDE_OBJECT NAME={params.P}
  {% endif %}

  {% if 'S' in params %}
    {% if params.S == '-1' %}
      {% if printer.exclude_object.current_object %}
        EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
      {% endif %}
    {% else %}
      EXCLUDE_OBJECT_START NAME={params.S}
    {% endif %}
  {% endif %}

  {% if 'U' in params %}
    EXCLUDE_OBJECT RESET=1 NAME={params.U}
  {% endif %}


## 备份配置文件到GitHub
# 参考文档 https://github.com/th33xitus/kiauh/wiki/How-to-autocommit-config-changes-to-github%3F
[gcode_shell_command backup_cfg]
command: sh ~/klipper_config/scripts/git_backup.sh
timeout: 120.
verbose: True

[gcode_macro BACKUP_CFG]
gcode:
    RUN_SHELL_COMMAND CMD=backup_cfg
